services:

  restaurant-db:
    container_name: restaurant-db
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${RESTAURANT_DB_USER}"]
      interval: 10s
      retries: 5
    environment:
      POSTGRES_DB: ${RESTAURANT_DB}
      POSTGRES_USER: ${RESTAURANT_DB_USER}
      POSTGRES_PASSWORD: ${RESTAURANT_DB_PASSWORD}
    volumes:
      - data-restaurant:/var/lib/postgresql/data
    restart: always
    networks:
      - sabor-digital

  waiter-db:
    container_name: waiter-db
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${WAITER_DB}
      POSTGRES_USER: ${WAITER_DB_USER}
      POSTGRES_PASSWORD: ${WAITER_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${WAITER_DB_USER}"]
      interval: 10s
      retries: 5
    volumes:
      - data-waiter:/var/lib/postgresql/data
    restart: always
    networks:
      - sabor-digital

  table-db:
    container_name: table-db
    image: postgres:16-alpine
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: ${TABLE_DB}
      POSTGRES_USER: ${TABLE_DB_USER}
      POSTGRES_PASSWORD: ${TABLE_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${TABLE_DB_USER}"]
      interval: 10s
      retries: 5
    volumes:
      - data-table:/var/lib/postgresql/data
    restart: always
    networks:
      - sabor-digital

  order-db:
    container_name: order-db
    image: postgres:16-alpine
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: ${ORDER_DB}
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${ORDER_DB_USER}"]
      interval: 10s
      retries: 5
    volumes:
      - data-order:/var/lib/postgresql/data
    restart: always
    networks:
      - sabor-digital

  restaurant-app:
    container_name: restaurant-app
    build:
      context: ./
      dockerfile: ./restaurant/Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ./restaurant/.env
    restart: always
    depends_on:
      - restaurant-db
    networks:
      - sabor-digital

  waiter-app:
    container_name: waiter-app
    build:
      context: ./
      dockerfile: ./waiter/Dockerfile
    ports:
      - "8084:8084"
    env_file:
      - ./waiter/.env
    depends_on:
      - waiter-db
      - restaurant-app
    restart: always
    networks:
      - sabor-digital

  table-app:
    container_name: table-app
    build:
      context: ./
      dockerfile: ./table/Dockerfile
    ports:
      - "8083:8083"
    env_file: ./table/.env
    depends_on:
      - table-db
      - restaurant-app
    restart: always
    networks:
      - sabor-digital

  order-app:
    container_name: order-app
    build:
      context: ./
      dockerfile: ./order/Dockerfile
    ports:
      - "8081:8081"
    env_file: ./order/.env
    depends_on:
      - order-db
      - restaurant-app
      - waiter-app
      - table-app
    restart: always
    networks:
      - sabor-digital

volumes:
  data-restaurant:
    name: data-restaurant
  data-waiter:
    name: data-waiter
  data-table:
    name: data-table
  data-order:
    name: data-order

networks:
  sabor-digital:
    name: sabor-digital
    driver: bridge